@model uvrp.Posts

@{
    ViewBag.Title = "Edit"; Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}
<input type="hidden" id="addClass" value="1" />
<div class="mb-3">
    <h2>Edit Post</h2>
</div>
<div class="col-12">
    <div class="alert alert-danger" role="alert">

    </div>
</div>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row align-items-center">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label text-capitalize" })
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control outline", required = "required" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label text-capitalize" })

                @Html.DropDownListFor(model => model.Category, ViewBag.Cats as SelectList, new { @class = "form-control outline" })
                @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-12">
            <div class="form-group">
                @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label text-capitalize" })
                @Html.HiddenFor(model => model.Content)
                <textarea id="editor" autofocus></textarea>
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-12">
            <div class="form-group">
                <div class="form-check">
                    @Html.HiddenFor(model => model.Recurring)
                    <input type="checkbox" class="form-check-input" id="isRecurring" />
                    @Html.LabelFor(model => model.Recurring, htmlAttributes: new { @class = "form-check-label" })
                    @Html.ValidationMessageFor(model => model.Recurring, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div id="NormalOptions">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.EventStartDate, htmlAttributes: new { @class = "control-label text-capitalize" })

                    @Html.EditorFor(model => model.EventStartDate, new { htmlAttributes = new { @type = "datetime-local", @class = "form-control outline" } })
                    @Html.ValidationMessageFor(model => model.EventStartDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.EventEndDate, htmlAttributes: new { @type = "datetime-local", @class = "control-label text-capitalize" })
                    @Html.EditorFor(model => model.EventEndDate, new { htmlAttributes = new { @type = "datetime-local", @class = "form-control outline" } })
                    @Html.ValidationMessageFor(model => model.EventEndDate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div id="recurringOptions" class="row mx-0 w-100">
            <div class="col-md-12">
                <div class="form-group">
                    <label>Days Of Week</label>
                    @Html.HiddenFor(model => model.DaysOfWeek)
                    <select class="form-control outline" id="dow" multiple>
                        <option value=0>Sunday</option>
                        <option value=1>Monday</option>
                        <option value=2>Tuesday</option>
                        <option value=3>Wednesday</option>
                        <option value=4>Thursday</option>
                        <option value=5>Friday</option>
                        <option value=6>Saturday</option>
                    </select>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.startTime, htmlAttributes: new { @class = "control-label text-capitalize" })
                    @Html.EditorFor(model => model.startTime, new { htmlAttributes = new { @type = "time", @class = "form-control outline" } })
                    @Html.ValidationMessageFor(model => model.startTime, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.endTime, htmlAttributes: new { @class = "control-label text-capitalize" })
                    @Html.EditorFor(model => model.endTime, new { htmlAttributes = new { @type = "time", @class = "form-control outline" } })
                    @Html.ValidationMessageFor(model => model.endTime, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.EventLocation, htmlAttributes: new { @class = "control-label text-capitalize" })

                @Html.EditorFor(model => model.EventLocation, new { htmlAttributes = new { @class = "form-control outline lg" } })
                @Html.ValidationMessageFor(model => model.EventLocation, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.ImageUpload, htmlAttributes: new { @class = "control-label text-capitalize" })
                @Html.EditorFor(model => model.ImageUpload, new { htmlAttributes = new { @type = "file", @class = "form-control outline lg", style = "color:transparent" } })
                @Html.DisplayFor(model => model.ImageUpload)
                @ViewBag.UploadMessage
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label text-capitalize" })
                @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @type = "url", @class = "form-control outline" } })
                @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Organization, htmlAttributes: new { @class = "control-label text-capitalize" })
                @Html.EditorFor(model => model.Organization, new { htmlAttributes = new { @class = "form-control outline" } })
                @Html.ValidationMessageFor(model => model.Organization, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.EventContact, htmlAttributes: new { @class = "control-label text-capitalize" })
                @Html.EditorFor(model => model.EventContact, new { htmlAttributes = new { @class = "form-control outline" } })
                @Html.ValidationMessageFor(model => model.EventContact, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label text-capitalize" })
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @type = "email", @class = "form-control outline" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label text-capitalize" })
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control outline" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="row text-right">
        <div class="col-12">
            @Html.ActionLink("Back to List", "Index", "", new { @class = "btn btn-outline-primary mb-2" })
            <input class="btn btn-primary mb-2" id="SaveDraftButton" type="button" value="Save Draft" />
            <input class="btn btn-primary mb-2" id="TrashButton" type="button" value="Move to Trash" />
            <input class="btn btn-primary mb-2" id="PublishButton" type="button" value="Publish" />
        </div>
    </div>
}


<script>



    $(document).ready(function () {
        $('.alert').hide();
       
        var formData = new FormData();

        var editor = CKEDITOR.replace("editor");

        editor.setData($('#Content').val());

        function disableButtons(){
            $('#PublishButton').prop('disabled', true)
            $('#TrashButton').prop('disabled', true)
            $('#SaveDraftButton').prop('disabled', true)
        }
        
        function getPostObject() {
            formData.append('Id', $('#Id').val());
            formData.append('Title', $('#Title').val());
            formData.append('Content', editor.getData());
            formData.append('Category', $('#Category').find(":selected").text());
            formData.append('EventStartDate', $('#EventStartDate').val());
            formData.append('EventEndDate', $('#EventEndDate').val());
            formData.append('Recurring', $('#isRecurring').is(":checked"));
            formData.append('Location', $('#EventLocation').val());
            formData.append('ImageUpload', $('#ImageUpload').prop('files')[0]);
            formData.append('Website', $('#Website').val());
            formData.append('Organization', $('#Organization').val());
            formData.append('EventContact', $('#EventContact').val());
            formData.append('Email', $('#Email').val());
            formData.append('Phone', $('#Phone').val());
            let dow = $('#dow').val();
            formData.append('DaysOfWeek', dow.map(x => parseInt(x)));
            formData.append('startTime', $('#startTime').val());
            formData.append('endTime', $('#endTime').val());
        }

        function sendFormData() {
            $('.alert').empty();
            $('.alert').show();

            if ($('#Title').val() == "") {
                $('.alert').append("Title missing.");
                return;
            }

            if (editor.getData() == "") {
                $('.alert').append("Content missing.");
                return;
            }

            $('.alert').hide();

            if (formData != null) {
                disableButtons();
                $.ajax({
                    type: "POST",
                    url: "/Posts/EditPost",
                    data: formData,
                    contentType: false,
                    processData: false,
                    cache: false,
                    success: function (response) {
                        console.log(response);
                        window.location.href = response.redirectToUrl;
                    },
                    failure: function (response) {
                        console.log(response);
                    },
                    error: function (response) {
                        console.log(response);
                    }
                });
            }
        }

        $("#SaveDraftButton").click(function () {
            getPostObject();
            formData.append('PostStatus', "Pending");
            sendFormData();
        });

        $("#TrashButton").click(function () {
            getPostObject();
            formData.append('PostStatus', "Deleted");
            sendFormData();
        });

        $("#PublishButton").click(function () {
            getPostObject();
            formData.append('PostStatus', "Published");
            sendFormData();
        });

        if ($("#Recurring").val() == "True") {
            $("#isRecurring").prop('checked', true);
            $("#recurringOptions").show();
            $("#NormalOptions").hide();
            let dowString = $("#DaysOfWeek").val();
            $('#dow').val($("#DaysOfWeek").val().split(','));

        } else {
            $("#isRecurring").prop('checked', false);
            $("#recurringOptions").hide();
            $("#NormalOptions").show();
        }

        $("#isRecurring").change(function () {
            if (this.checked) {
                $("#recurringOptions").show();
                $("#NormalOptions").hide();
            } else {
                $("#NormalOptions").show();
                $("#recurringOptions").hide();
            }
        });


    });



</script>
